JUnit4中使用Hamcrest测试框架的assertThat断言 
小实例.txt我爸说过的最让我感动的一句话：“孩子，好好学习吧，爸以前玩麻将都玩儿10块的，现在为了供你念书，改玩儿1块的了。”?
1.JUnit4.4引入了Hamcrest框架，Hamcest提供了一套匹配符Matcher，这些匹配符更接近自然语言，可读性高，更加灵活；
2.使用全新的断言语法：assertThat，结合Hamcest提供的匹配符，只用这一个方法，就可以实现所有的测试；

3.assertThat语法如下：
     assertThat(T actual, Matcher<T> matcher);
     assertThat(String reason, T actual, Matcher<T> matcher);
     其中actual为需要测试的变量，matcher为使用Hamcrest的匹配符来表达变量actual期望值的声明；
4.注意事项：
     a.必须导入JUnit4.4之后的版本才能使用assertThat方法；
     b.不需要继承TestCase类，但是需要测试方法前必须加“@Test”。
实例：

public class C {

public int add(int a, int b) {

   return a + b;
}

public double div(double a, double b) {

   return a / b;
}

public String getName(String name) {

   return name;
}

public List<String> getList(String item) {

   List<String> l = new ArrayList<String>();
   l.add(item);
   return l;
}

public Map<String, String> getMap(String key, String value) {

   Map<String, String> m = new HashMap<String, String>();
   m.put(key, value);
   return m;
}
}

=============================================?
import static org.junit.Assert.*;
import static org.hamcrest.Matchers.*;

import java.util.List;
import java.util.Map;
import org.junit.Test;

public class CTest {

@Test
public void testAdd() {

   //一般匹配符 
   int s = new C().add(1, 1);
   //allOf：所有条件必须都成立，测试才通过 
   assertThat(s, allOf(greaterThan(1), lessThan(3)));
   //anyOf：只要有一个条件成立，测试就通过 
   assertThat(s, anyOf(greaterThan(1), lessThan(1)));
   //anything：无论什么条件，测试都通过 
   assertThat(s, anything());
   //is：变量的值等于指定值时，测试通过 
   assertThat(s, is(2));
   //not：和is相反，变量的值不等于指定值时，测试通过 
   assertThat(s, not(1));

   //数值匹配符 
   double d = new C().div(10, 3);
   //closeTo：浮点型变量的值在3.0±0.5范围内，测试通过 
   assertThat(d, closeTo(3.0, 0.5));
   //greaterThan：变量的值大于指定值时，测试通过 
   assertThat(d, greaterThan(3.0));
   //lessThan：变量的值小于指定值时，测试通过 
   assertThat(d, lessThan(3.5));
   //greaterThanOrEuqalTo：变量的值大于等于指定值时，测试通过 
   assertThat(d, greaterThanOrEqualTo(3.3));
   //lessThanOrEqualTo：变量的值小于等于指定值时，测试通过 
   assertThat(d, lessThanOrEqualTo(3.4));

   //字符串匹配符 
   String n = new C().getName("Magci");
   //containsString：字符串变量中包含指定字符串时，测试通过 
   assertThat(n, containsString("ci"));
   //startsWith：字符串变量以指定字符串开头时，测试通过 
   assertThat(n, startsWith("Ma"));
   //endsWith：字符串变量以指定字符串结尾时，测试通过 
   assertThat(n, endsWith("i"));
   //euqalTo：字符串变量等于指定字符串时，测试通过 
   assertThat(n, equalTo("Magci"));
   //equalToIgnoringCase：字符串变量在忽略大小写的情况下等于指定字符串时，测试通过 
   assertThat(n, equalToIgnoringCase("magci"));
   //equalToIgnoringWhiteSpace：字符串变量在忽略头尾任意空格的情况下等于指定字符串时，测试通过 
   assertThat(n, equalToIgnoringWhiteSpace(" Magci   "));

   //集合匹配符 
   List<String> l = new C().getList("Magci");
   //hasItem：Iterable变量中含有指定元素时，测试通过 
   assertThat(l, hasItem("Magci"));

   Map<String, String> m = new C().getMap("mgc", "Magci");
   //hasEntry：Map变量中含有指定键值对时，测试通过 
   assertThat(m, hasEntry("mgc", "Magci"));
   //hasKey：Map变量中含有指定键时，测试通过 
   assertThat(m, hasKey("mgc"));
   //hasValue：Map变量中含有指定值时，测试通过 
   assertThat(m, hasValue("Magci"));
}

